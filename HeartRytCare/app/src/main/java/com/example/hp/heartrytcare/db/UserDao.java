package com.example.hp.heartrytcare.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.hp.heartrytcare.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_type = new Property(1, int.class, "user_type", false, "USER_TYPE");
        public final static Property Last_name = new Property(2, String.class, "last_name", false, "LAST_NAME");
        public final static Property First_name = new Property(3, String.class, "first_name", false, "FIRST_NAME");
        public final static Property License_number = new Property(4, String.class, "license_number", false, "LICENSE_NUMBER");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Contact_number = new Property(6, String.class, "contact_number", false, "CONTACT_NUMBER");
        public final static Property Password = new Property(7, String.class, "password", false, "PASSWORD");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_TYPE\" INTEGER NOT NULL ," + // 1: user_type
                "\"LAST_NAME\" TEXT NOT NULL ," + // 2: last_name
                "\"FIRST_NAME\" TEXT NOT NULL ," + // 3: first_name
                "\"LICENSE_NUMBER\" TEXT," + // 4: license_number
                "\"EMAIL\" TEXT NOT NULL ," + // 5: email
                "\"CONTACT_NUMBER\" TEXT," + // 6: contact_number
                "\"PASSWORD\" TEXT NOT NULL );"); // 7: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_type());
        stmt.bindString(3, entity.getLast_name());
        stmt.bindString(4, entity.getFirst_name());
 
        String license_number = entity.getLicense_number();
        if (license_number != null) {
            stmt.bindString(5, license_number);
        }
        stmt.bindString(6, entity.getEmail());
 
        String contact_number = entity.getContact_number();
        if (contact_number != null) {
            stmt.bindString(7, contact_number);
        }
        stmt.bindString(8, entity.getPassword());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // user_type
            cursor.getString(offset + 2), // last_name
            cursor.getString(offset + 3), // first_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // license_number
            cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contact_number
            cursor.getString(offset + 7) // password
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_type(cursor.getInt(offset + 1));
        entity.setLast_name(cursor.getString(offset + 2));
        entity.setFirst_name(cursor.getString(offset + 3));
        entity.setLicense_number(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.getString(offset + 5));
        entity.setContact_number(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPassword(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
