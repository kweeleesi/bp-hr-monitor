package com.example.hp.heartrytcare.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.hp.heartrytcare.db.LimitValues;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIMIT_VALUES".
*/
public class LimitValuesDao extends AbstractDao<LimitValues, Long> {

    public static final String TABLENAME = "LIMIT_VALUES";

    /**
     * Properties of entity LimitValues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Firebase_user_id = new Property(1, String.class, "firebase_user_id", false, "FIREBASE_USER_ID");
        public final static Property BpLimit = new Property(2, String.class, "bpLimit", false, "BP_LIMIT");
        public final static Property HrLimit = new Property(3, String.class, "hrLimit", false, "HR_LIMIT");
    };


    public LimitValuesDao(DaoConfig config) {
        super(config);
    }
    
    public LimitValuesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIMIT_VALUES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FIREBASE_USER_ID\" TEXT NOT NULL ," + // 1: firebase_user_id
                "\"BP_LIMIT\" TEXT," + // 2: bpLimit
                "\"HR_LIMIT\" TEXT);"); // 3: hrLimit
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIMIT_VALUES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LimitValues entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFirebase_user_id());
 
        String bpLimit = entity.getBpLimit();
        if (bpLimit != null) {
            stmt.bindString(3, bpLimit);
        }
 
        String hrLimit = entity.getHrLimit();
        if (hrLimit != null) {
            stmt.bindString(4, hrLimit);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LimitValues readEntity(Cursor cursor, int offset) {
        LimitValues entity = new LimitValues( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // firebase_user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bpLimit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // hrLimit
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LimitValues entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirebase_user_id(cursor.getString(offset + 1));
        entity.setBpLimit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHrLimit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LimitValues entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LimitValues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
