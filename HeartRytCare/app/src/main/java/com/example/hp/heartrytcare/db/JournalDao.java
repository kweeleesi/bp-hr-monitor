package com.example.hp.heartrytcare.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.hp.heartrytcare.db.Journal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOURNAL".
*/
public class JournalDao extends AbstractDao<Journal, Long> {

    public static final String TABLENAME = "JOURNAL";

    /**
     * Properties of entity Journal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Meals_taken = new Property(1, String.class, "meals_taken", false, "MEALS_TAKEN");
        public final static Property Heart_rate = new Property(2, Integer.class, "heart_rate", false, "HEART_RATE");
        public final static Property Systolic = new Property(3, String.class, "systolic", false, "SYSTOLIC");
        public final static Property Diastolic = new Property(4, String.class, "diastolic", false, "DIASTOLIC");
        public final static Property Temperature = new Property(5, Integer.class, "temperature", false, "TEMPERATURE");
        public final static Property Weight = new Property(6, Double.class, "weight", false, "WEIGHT");
        public final static Property Medicine_name = new Property(7, String.class, "medicine_name", false, "MEDICINE_NAME");
        public final static Property Dosage = new Property(8, String.class, "dosage", false, "DOSAGE");
        public final static Property Pieces = new Property(9, String.class, "pieces", false, "PIECES");
        public final static Property How_often = new Property(10, String.class, "how_often", false, "HOW_OFTEN");
        public final static Property Notes = new Property(11, String.class, "notes", false, "NOTES");
    };


    public JournalDao(DaoConfig config) {
        super(config);
    }
    
    public JournalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOURNAL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEALS_TAKEN\" TEXT," + // 1: meals_taken
                "\"HEART_RATE\" INTEGER," + // 2: heart_rate
                "\"SYSTOLIC\" TEXT," + // 3: systolic
                "\"DIASTOLIC\" TEXT," + // 4: diastolic
                "\"TEMPERATURE\" INTEGER," + // 5: temperature
                "\"WEIGHT\" REAL," + // 6: weight
                "\"MEDICINE_NAME\" TEXT," + // 7: medicine_name
                "\"DOSAGE\" TEXT," + // 8: dosage
                "\"PIECES\" TEXT," + // 9: pieces
                "\"HOW_OFTEN\" TEXT," + // 10: how_often
                "\"NOTES\" TEXT);"); // 11: notes
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOURNAL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Journal entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String meals_taken = entity.getMeals_taken();
        if (meals_taken != null) {
            stmt.bindString(2, meals_taken);
        }
 
        Integer heart_rate = entity.getHeart_rate();
        if (heart_rate != null) {
            stmt.bindLong(3, heart_rate);
        }
 
        String systolic = entity.getSystolic();
        if (systolic != null) {
            stmt.bindString(4, systolic);
        }
 
        String diastolic = entity.getDiastolic();
        if (diastolic != null) {
            stmt.bindString(5, diastolic);
        }
 
        Integer temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindLong(6, temperature);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(7, weight);
        }
 
        String medicine_name = entity.getMedicine_name();
        if (medicine_name != null) {
            stmt.bindString(8, medicine_name);
        }
 
        String dosage = entity.getDosage();
        if (dosage != null) {
            stmt.bindString(9, dosage);
        }
 
        String pieces = entity.getPieces();
        if (pieces != null) {
            stmt.bindString(10, pieces);
        }
 
        String how_often = entity.getHow_often();
        if (how_often != null) {
            stmt.bindString(11, how_often);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(12, notes);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Journal readEntity(Cursor cursor, int offset) {
        Journal entity = new Journal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // meals_taken
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // heart_rate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // systolic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // diastolic
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // temperature
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // weight
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // medicine_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dosage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pieces
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // how_often
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // notes
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Journal entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMeals_taken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeart_rate(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSystolic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDiastolic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTemperature(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setWeight(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setMedicine_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDosage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPieces(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHow_often(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNotes(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Journal entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Journal entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
