package com.example.hp.heartrytcare.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.hp.heartrytcare.db.Medication;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDICATION".
*/
public class MedicationDao extends AbstractDao<Medication, Long> {

    public static final String TABLENAME = "MEDICATION";

    /**
     * Properties of entity Medication.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Firebase_user_id = new Property(1, String.class, "firebase_user_id", false, "FIREBASE_USER_ID");
        public final static Property NameOfMed = new Property(2, String.class, "nameOfMed", false, "NAME_OF_MED");
        public final static Property Dosage = new Property(3, String.class, "dosage", false, "DOSAGE");
        public final static Property NumberOfMed = new Property(4, String.class, "numberOfMed", false, "NUMBER_OF_MED");
        public final static Property Method = new Property(5, String.class, "method", false, "METHOD");
        public final static Property HowOften = new Property(6, String.class, "howOften", false, "HOW_OFTEN");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property StartDate = new Property(8, String.class, "startDate", false, "START_DATE");
        public final static Property Duration = new Property(9, String.class, "duration", false, "DURATION");
        public final static Property Alert = new Property(10, Boolean.class, "alert", false, "ALERT");
    };


    public MedicationDao(DaoConfig config) {
        super(config);
    }
    
    public MedicationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDICATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FIREBASE_USER_ID\" TEXT NOT NULL ," + // 1: firebase_user_id
                "\"NAME_OF_MED\" TEXT," + // 2: nameOfMed
                "\"DOSAGE\" TEXT," + // 3: dosage
                "\"NUMBER_OF_MED\" TEXT," + // 4: numberOfMed
                "\"METHOD\" TEXT," + // 5: method
                "\"HOW_OFTEN\" TEXT," + // 6: howOften
                "\"TIME\" TEXT," + // 7: time
                "\"START_DATE\" TEXT," + // 8: startDate
                "\"DURATION\" TEXT," + // 9: duration
                "\"ALERT\" INTEGER);"); // 10: alert
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDICATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Medication entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFirebase_user_id());
 
        String nameOfMed = entity.getNameOfMed();
        if (nameOfMed != null) {
            stmt.bindString(3, nameOfMed);
        }
 
        String dosage = entity.getDosage();
        if (dosage != null) {
            stmt.bindString(4, dosage);
        }
 
        String numberOfMed = entity.getNumberOfMed();
        if (numberOfMed != null) {
            stmt.bindString(5, numberOfMed);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(6, method);
        }
 
        String howOften = entity.getHowOften();
        if (howOften != null) {
            stmt.bindString(7, howOften);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(9, startDate);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(10, duration);
        }
 
        Boolean alert = entity.getAlert();
        if (alert != null) {
            stmt.bindLong(11, alert ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Medication readEntity(Cursor cursor, int offset) {
        Medication entity = new Medication( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // firebase_user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nameOfMed
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dosage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // numberOfMed
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // method
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // howOften
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // startDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // duration
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // alert
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Medication entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirebase_user_id(cursor.getString(offset + 1));
        entity.setNameOfMed(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDosage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumberOfMed(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMethod(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHowOften(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStartDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDuration(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAlert(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Medication entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Medication entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
